// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kong.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Credential : ModelBaseWithMilisecCreate
    {
        /// <summary>
        /// Initializes a new instance of the Credential class.
        /// </summary>
        public Credential()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Credential class.
        /// </summary>
        /// <param name="id">Uid.</param>
        /// <param name="createdAt">Milisec based timestamp of the create
        /// action</param>
        /// <param name="key">A unique string identifying the
        /// credential.</param>
        /// <param name="secret">If algorithm is HS256 or ES256, the secret
        /// used to sign JWTs for this credential.</param>
        /// <param name="algorithm">The algorithm used to verify the token’s
        /// signature. Can be HS256, HS384, HS512, RS256, or ES256. Possible
        /// values include: 'HS256', 'HS384', 'HS512', 'RS256', 'ES256'</param>
        /// <param name="rsaPublicKey">If algorithm is RS256 or ES256, the
        /// public key (in PEM format) to use to verify the token’s
        /// signature.</param>
        /// <param name="consumerId">Uid of consumer.</param>
        public Credential(string id = default(string), int? createdAt = default(int?), string key = default(string), string secret = default(string), string algorithm = default(string), string rsaPublicKey = default(string), string consumerId = default(string))
            : base(id, createdAt)
        {
            Key = key;
            Secret = secret;
            Algorithm = algorithm;
            RsaPublicKey = rsaPublicKey;
            ConsumerId = consumerId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a unique string identifying the credential.
        /// </summary>
        [JsonProperty(PropertyName = "key")]
        public string Key { get; set; }

        /// <summary>
        /// Gets or sets if algorithm is HS256 or ES256, the secret used to
        /// sign JWTs for this credential.
        /// </summary>
        [JsonProperty(PropertyName = "secret")]
        public string Secret { get; set; }

        /// <summary>
        /// Gets or sets the algorithm used to verify the token’s signature.
        /// Can be HS256, HS384, HS512, RS256, or ES256. Possible values
        /// include: 'HS256', 'HS384', 'HS512', 'RS256', 'ES256'
        /// </summary>
        [JsonProperty(PropertyName = "algorithm")]
        public string Algorithm { get; set; }

        /// <summary>
        /// Gets or sets if algorithm is RS256 or ES256, the public key (in PEM
        /// format) to use to verify the token’s signature.
        /// </summary>
        [JsonProperty(PropertyName = "rsa_public_key")]
        public string RsaPublicKey { get; set; }

        /// <summary>
        /// Gets or sets uid of consumer.
        /// </summary>
        [JsonProperty(PropertyName = "consumer_id")]
        public string ConsumerId { get; set; }

    }
}
