// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kong
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// REST interface to configurate Kong.
    /// </summary>
    public partial interface IKongAdminAPI : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// List all services
        /// </summary>
        /// <param name='offset'>
        /// An uid of a service as an offset.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ServiceList>> ListServicesWithHttpMessagesAsync(string offset = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Registrate service to Kong
        /// </summary>
        /// <param name='serviceUpsert'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Service>> AddServiceWithHttpMessagesAsync(ServiceUpsert serviceUpsert, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a service by a name or id
        /// </summary>
        /// <param name='service'>
        /// The unique identifier or the name of the Service to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteServiceWithHttpMessagesAsync(string service, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Routes associated to a specific Service
        /// </summary>
        /// <param name='service'>
        /// The unique identifier or the name attribute of the Service that's
        /// Routes should be listed.
        /// </param>
        /// <param name='offset'>
        /// An uid of a route as an offset.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RouteList>> ListRoutesWithHttpMessagesAsync(string service, string offset = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Route associated to a specific Service
        /// </summary>
        /// <param name='service'>
        /// The unique identifier or the name attribute of the Service that
        /// should be associated to the newly-created Route.
        /// </param>
        /// <param name='routeUpsert'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Route>> AddRouteWithHttpMessagesAsync(string service, RouteUpsert routeUpsert, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a Route by a name or id
        /// </summary>
        /// <param name='route'>
        /// The unique identifier or the name of the Route to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteRouteWithHttpMessagesAsync(string route, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Plugins associated to a specific Service
        /// </summary>
        /// <param name='service'>
        /// The unique identifier or the name attribute of the Service that's
        /// Plugins should be listed.
        /// </param>
        /// <param name='offset'>
        /// An uid of a plugin as an offset.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PluginList>> ListPluginsWithHttpMessagesAsync(string service, string offset = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Enabling the plugin on a Service
        /// </summary>
        /// <param name='service'>
        /// The id or name of the Service that this plugin configuration will
        /// target..
        /// </param>
        /// <param name='pluginUpsert'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Plugin>> AddPluginWithHttpMessagesAsync(string service, PluginUpsert pluginUpsert, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a Plugin by an id
        /// </summary>
        /// <param name='pluginId'>
        /// The unique identifier of the Plugin to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeletePluginWithHttpMessagesAsync(string pluginId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List all Consumers
        /// </summary>
        /// <param name='offset'>
        /// An uid of a consumer as an offset.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ConsumerList>> ListConsumersWithHttpMessagesAsync(string offset = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Consumer
        /// </summary>
        /// <param name='consumerUpsert'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Consumer>> AddConsumerWithHttpMessagesAsync(ConsumerUpsert consumerUpsert, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve a Consumer
        /// </summary>
        /// <param name='consumer'>
        /// The unique identifier or the username of the Consumer to retrieve.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Consumer>> GetConsumerWithHttpMessagesAsync(string consumer, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a Consumer
        /// </summary>
        /// <param name='consumer'>
        /// The unique identifier or the username of the Consumer to update.
        /// </param>
        /// <param name='consumerUpsert'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Consumer>> UpdateConsumerWithHttpMessagesAsync(string consumer, ConsumerUpsert consumerUpsert, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create or update a Consumer
        /// </summary>
        /// <param name='consumer'>
        /// The unique identifier of the new Consumer.
        /// </param>
        /// <param name='consumerUpsert'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Consumer>> AddConsumerWithIdWithHttpMessagesAsync(string consumer, ConsumerUpsert consumerUpsert, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a Consumer by username or id
        /// </summary>
        /// <param name='consumer'>
        /// The unique identifier or the username of the Consumer to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteConsumerWithHttpMessagesAsync(string consumer, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List JWT credentials of Consumer
        /// </summary>
        /// <param name='consumer'>
        /// The id or username property of the Consumer entity to list
        /// credentials for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CredentialList>> ListCredentialsWithHttpMessagesAsync(string consumer, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a JWT credential
        /// </summary>
        /// <param name='consumer'>
        /// The id or username property of the Consumer entity to associate the
        /// credentials to.
        /// </param>
        /// <param name='credentialUpsert'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Credential>> AddCredentialWithHttpMessagesAsync(string consumer, CredentialUpsert credentialUpsert = default(CredentialUpsert), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a JWT Credential
        /// </summary>
        /// <param name='consumer'>
        /// The id or username property of the Consumer entity to associate the
        /// credentials to.
        /// </param>
        /// <param name='id'>
        /// The id or the key of the JWT credential.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Credential>> GetCredentialWithHttpMessagesAsync(string consumer, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a JWT Credential
        /// </summary>
        /// <param name='consumer'>
        /// The id or username property of the Consumer entity to associate the
        /// credentials to.
        /// </param>
        /// <param name='id'>
        /// The id or the key of the JWT credential.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteCredentialWithHttpMessagesAsync(string consumer, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve all ACLs
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AclList>> ListAclsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve all ACLs for the given Consumer
        /// </summary>
        /// <param name='consumer'>
        /// The id or username property of the Consumer entity which ACLs will
        /// be listed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AclList>> ListAclsForConsumerWithHttpMessagesAsync(string consumer, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add ACL to a consumer
        /// </summary>
        /// <param name='consumer'>
        /// The id or username property of the Consumer entity to associate the
        /// credentials to.
        /// </param>
        /// <param name='group'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Acl>> AddAclWithHttpMessagesAsync(string consumer, string group, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an ACL
        /// </summary>
        /// <param name='consumer'>
        /// The id or username property of the Consumer entity to associate the
        /// credentials to.
        /// </param>
        /// <param name='id'>
        /// The id of the ACL.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteAclWithHttpMessagesAsync(string consumer, string id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
